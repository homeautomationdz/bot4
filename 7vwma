import ccxt
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import asyncio
from telegram import Bot
from telegram.error import TelegramError

def fetch_binance_data(symbol, timeframe='1m', limit=100):
    try:
        binance = ccxt.binance()
        ohlcv = binance.fetch_ohlcv(symbol, timeframe=timeframe, limit=limit)
        data = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        data['timestamp'] = pd.to_datetime(data['timestamp'], unit='ms')
        return data
    except Exception as e:
        print(f"Error fetching data for {symbol}: {e}")
        return pd.DataFrame()

def calculate_vwma(data, period):
    vwma = (data['close'] * data['volume']).rolling(window=period).sum() / data['volume'].rolling(window=period).sum()
    return vwma

def detect_vwma_cross(data, short_period, long_period):
    data['vwma_short'] = calculate_vwma(data, short_period)
    data['vwma_long'] = calculate_vwma(data, long_period)
    
    data['crossover'] = (data['vwma_short'] > data['vwma_long']).astype(int).diff()
    crossovers = data[data['crossover'] == 1]  # Short-term VWMA crosses above long-term VWMA
    crossdowns = data[data['crossover'] == -1]  # Short-term VWMA crosses below long-term VWMA
    
    return crossovers, crossdowns

def plot_vwma(data, crossovers, crossdowns, symbol, filename):
    plt.figure(figsize=(12, 6))
    plt.plot(data['timestamp'], data['close'], label='Close Price')
    plt.plot(data['timestamp'], data['vwma_short'], label='Short-term VWMA', linestyle='--', color='orange')
    plt.plot(data['timestamp'], data['vwma_long'], label='Long-term VWMA', linestyle='--', color='purple')
    plt.scatter(crossovers['timestamp'], crossovers['close'], color='green', label='Crossover Points', marker='x')
    plt.scatter(crossdowns['timestamp'], crossdowns['close'], color='red', label='Crossdown Points', marker='o')
    plt.xlabel('Timestamp')
    plt.ylabel('Price')
    plt.legend()
    plt.title(f'VWMA Crossover and Crossdown Detection for {symbol}')
    plt.savefig(filename)
    plt.close()

async def send_image_to_telegram(filename, token, chat_id):
    bot = Bot(token=token)
    try:
        with open(filename, 'rb') as photo:
            await bot.send_photo(chat_id=chat_id, photo=photo)
    except TelegramError as e:
        print(f"Error sending image to Telegram: {e}")

async def process_symbol(symbol, timeframe, short_period, long_period, token, chat_id):
    data = fetch_binance_data(symbol, timeframe)
    if data.empty:
        print(f"No data fetched for {symbol}.")
        return

    crossovers, crossdowns = detect_vwma_cross(data, short_period, long_period)
    if not crossovers.empty or not crossdowns.empty:
        most_recent_crossover = crossovers.iloc[-1] if not crossovers.empty else None
        most_recent_crossdown = crossdowns.iloc[-1] if not crossdowns.empty else None
        
        most_recent_time = data.iloc[-1]['timestamp']
        
        recent_crossover = most_recent_crossover and most_recent_crossover['timestamp'] == most_recent_time
        recent_crossdown = most_recent_crossdown and most_recent_crossdown['timestamp'] == most_recent_time
        
        if recent_crossover or recent_crossdown:
            filename = f'{symbol.replace("/", "_")}_vwma_crossover_crossdown.png'
            plot_vwma(data, crossovers, crossdowns, symbol, filename)
            await send_image_to_telegram(filename, token, chat_id)
        else:
            print(f"No recent crossovers or crossdowns detected for {symbol}.")
    else:
        print(f"No crossovers or crossdowns detected for {symbol}.")

async def main():
    symbols = [
        'BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'XRP/USDT', 'ADA/USDT', 'SOL/USDT', 
        'DOGE/USDT', 'DOT/USDT', 'UNI/USDT', 'LTC/USDT', 'LINK/USDT', 'BCH/USDT',
        'MATIC/USDT', 'XLM/USDT', 'ATOM/USDT', 'ETC/USDT', 'FIL/USDT', 'VET/USDT'
    ]  # Add more pairs as needed
    timeframe = '1m'
    token = '7124807761:AAFeEIuLTN1VzLyunmVU4m-uEcLhaRQLN_Y'  # Replace with your actual token
    chat_id = '1385370555'  # Replace with your actual chat ID

    short_period = 20
    long_period = 50

    tasks = [process_symbol(symbol, timeframe, short_period, long_period, token, chat_id) for symbol in symbols]
    await asyncio.gather(*tasks)

if __name__ == "__main__":
    asyncio.run(main())